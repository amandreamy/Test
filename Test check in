#!/usr/bin/env python3

import os
import json
import sys
from datadog_api_client.v2 import ApiClient, ApiException, Configuration
from datadog_api_client.v2.api import services_api

def get_datadog_services_sdk_formatted():
    """
    Fetches the list of APM services from the Datadog API using the official SDK.

    Reads DD_API_KEY, DD_APP_KEY, and DD_SITE from environment variables.
    Formats the output as a JSON object: {"services": [list_of_service_details]}
    and prints it to stdout.
    Exits with an error message if keys/site are missing or the API call fails.
    """
    # --- Get API Keys and Site from Environment Variables ---
    api_key = os.environ.get("DD_API_KEY")
    app_key = os.environ.get("DD_APP_KEY")
    site = os.environ.get("DD_SITE") # e.g., "us3.datadoghq.com", "datadoghq.com"

    if not api_key:
        print("Error: DD_API_KEY environment variable not set.", file=sys.stderr)
        sys.exit(1)
    if not app_key:
        print("Error: DD_APP_KEY environment variable not set.", file=sys.stderr)
        sys.exit(1)
    if not site:
        print("Error: DD_SITE environment variable not set (e.g., 'us3.datadoghq.com', 'datadoghq.com').", file=sys.stderr)
        sys.exit(1)

    # --- Configure API Client ---
    configuration = Configuration()
    # Configuration automatically picks up DD_API_KEY, DD_APP_KEY, DD_SITE
    # from environment variables if set.

    # --- Make API Call ---
    try:
        with ApiClient(configuration) as api_client:
            api_instance = services_api.ServicesApi(api_client)
            print(f"Fetching services from Datadog site {site}...", file=sys.stderr)

            # List services, using the environment filter '*'
            response = api_instance.list_services(filter_env="*")

            # --- Extract Full Service Details and Format Output ---
            service_details_list = []
            if response and hasattr(response, 'data') and isinstance(response.data, list):
                for item in response.data:
                    # Convert the SDK's service object to a dictionary
                    if hasattr(item, 'to_dict'):
                        service_details_list.append(item.to_dict())
                    else:
                         print(f"Warning: Skipping item without 'to_dict' method: {item}", file=sys.stderr)
            else:
                 print("Warning: No 'data' list found in the API response.", file=sys.stderr)
                 print(f"Full response object: {response}", file=sys.stderr)

            # Create the final output dictionary with the "services" key
            output_json = {"services": service_details_list}

            # --- Print Formatted JSON Output ---
            print(json.dumps(output_json, indent=2)) # Pretty print

    except ApiException as e:
        print(f"Datadog API Error: {e}", file=sys.stderr)
        try:
            error_body = json.loads(e.body)
            if 'errors' in error_body:
                print(f"Error details: {error_body['errors']}", file=sys.stderr)
        except (json.JSONDecodeError, TypeError):
             pass
        sys.exit(1)
    except Exception as e:
        print(f"An unexpected error occurred: {e}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    get_datadog_services_sdk_formatted()
